// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String   @id @default(cuid()) @map("_id")
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    userId            String
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String
    student_id    String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    union_fee     Boolean
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts Account[]
    sessions Session[]
    reserves Reserve[]

    vote2024  Vote2024[]
    nominated Nominee2024?  @relation(name: "nominated") // 被提名
    Nominee   Nominee2024[] @relation(name: "nominates") // 提名
}

model VerificationRequest {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Reserve {
    id        String         @id @default(uuid()) @map("_id")
    room      RoomAvailable?
    purpose   String
    startedAt DateTime
    endedAt   DateTime
    interval  Int
    user      User           @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

enum RoomAvailable {
    MOJODOJO
    CASAHOUSE
}

// The following blocks are used for the voting system 2024

model Vote2024 {
    id        String @id @default(uuid()) @map("_id")
    valid Boolean

    VotedTo Nominee2024 @relation(fields: [nominee2024Id], references: [id])
    nominee2024Id String
    user    User        @relation(fields: [userId], references: [id])
    userId    String

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Nominee2024 {
    id String @id @default(uuid()) @map("_id")

    nominee       User   @relation(fields: [userNomineeId], references: [id], name: "nominated")
    userNomineeId String @unique

    nomiatedBy      User   @relation(fields: [userNominatedId], references: [id], name: "nominates")
    userNominatedId String

    votes Vote2024[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
